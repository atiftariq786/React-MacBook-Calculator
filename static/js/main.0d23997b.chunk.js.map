{"version":3,"sources":["components/Button/index.js","components/OutputDisplay/index.js","components/Navbar/index.js","components/Math/index.js","containers/App.js","index.js"],"names":["button","props","gridSys","btnClass","xs","className","onClick","click","symbol","outputDisplay","outputShow","navbar","expand","Brand","href","icon","faGithub","size","faLinkedin","Math","state","inputNumbers","id","input","currentNumericInput","total","prevOperator","clickHandler","console","log","currentInputValue","tempInputNumbers","operatorHandler","setState","numericHandler","operator","resultAll","parseFloat","positiveNegResult","toString","equalHandler","num","dotCheck","checkNumeric","indexOf","resultHandler","displayNum","this","map","btnObject","Button","key","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d23997b.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport Col  from 'react-bootstrap/Col';\nimport \"./style.css\";\n\nconst button = (props) => {\n    \n    let gridSys = props.btnClass;     \n   \n    if(gridSys === \"col-wide\"){\n        gridSys = 6;\n    }\n    else{\n        gridSys = 3;\n    }   \n    \nreturn (\n        <Col xs ={gridSys}>\n            <button className ={props.btnClass} onClick = {props.click}>{props.symbol}</button>                        \n        </Col>                                                           \n    )    \n}\nexport default button;\n\n","\nimport React from \"react\";\n//import Container  from 'react-bootstrap/Container';\n//import Row  from 'react-bootstrap/Row';\nimport Col  from 'react-bootstrap/Col';\n//import Button from \"../Buttons/index\";\n//import Input from \"../InputDisplay/index\";\nimport \"./style.css\";\n\n\nconst outputDisplay = (props) => {\n    \n    \n    return (\n        \n                <Col>  \n                    <p className= \"output\">{props.outputShow}</p>                                       \n                </Col>    \n        \n          \n        \n    )\n}\n\nexport default outputDisplay;\n\n","import React from 'react';\n//import ReactDOM from 'react-dom';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faGithub} from '@fortawesome/free-brands-svg-icons';\nimport {faLinkedin} from '@fortawesome/free-brands-svg-icons';\nimport Navbar from 'react-bootstrap/Navbar';\nimport \"./style.css\";\n\nconst navbar = ()=> {\n\n    return (\n        <div>     \n            <Navbar expand=\"sm\">\n                <h3>{\"React MacBook Calculator\"}</h3>\n                    <div>\n                        <Navbar.Brand href=\"https://github.com/atiftariq786\">\n                            <FontAwesomeIcon icon={faGithub} size=\"2x\" />          \n                        </Navbar.Brand>\n\n                        <Navbar.Brand href=\"https://www.linkedin.com/in/atif-tariq-5b00b089/\">\n                            <FontAwesomeIcon icon={faLinkedin} size=\"2x\" />            \n                        </Navbar.Brand> \n                            \n                    </div>               \n            </Navbar>\n            \n        </div>        \n    )\n}\nexport default navbar;\n\n","\nimport React, {Component} from \"react\";\nimport Container  from 'react-bootstrap/Container';\nimport Row  from 'react-bootstrap/Row';\nimport Button from '../Button/index';\nimport Output from '../OutputDisplay/index';\nimport Navbar from \"../Navbar/index\";\nimport \"./style.css\";\n\nclass Math extends Component {        \n\n        state = {\n            inputNumbers :[\n            { id : \"cal1\", input: \"AC\", btnClass:\"white\"},\n            { id : \"cal2\", input: \"+/-\", btnClass:\"white\"},\n            { id : \"cal3\", input: \"%\", btnClass:\"white\"},\n            { id : \"cal4\", input: \"÷\", btnClass:\"orange\"},\n            { id : \"cal5\", input: 7, btnClass:\"white\"},\n            { id : \"cal6\", input: 8, btnClass:\"white\"},\n            { id : \"cal7\", input: 9, btnClass:\"white\"},\n            { id : \"cal8\", input: \"×\", btnClass:\"orange\"},\n            { id : \"cal9\", input: 4, btnClass:\"white\"},\n            { id : \"cal10\", input: 5, btnClass:\"white\"},\n            { id : \"cal11\", input: 6, btnClass:\"white\"},\n            { id : \"cal12\", input: \"-\", btnClass:\"orange\"},\n            { id : \"cal13\", input: 1, btnClass:\"white\"},\n            { id : \"cal14\", input: 2, btnClass:\"white\"},\n            { id : \"cal15\", input: 3, btnClass:\"white\"},\n            { id : \"cal16\", input: \"+\", btnClass:\"orange\"},\n            { id : \"cal17\", input: 0, btnClass:\"col-wide\"},\n            { id : \"cal18\", input: \".\", btnClass:\"white\"},\n            { id : \"cal19\", input: \"=\", btnClass:\"orange\"}],            \n            currentNumericInput: \"\",    \n            outputDisplay : \"\",\n            total : 0,\n            prevOperator : \"\"                            \n        }\n    //================================Click Handler=================================================\n    clickHandler = (input)=>{\n\n        console.log(\"Input value: \"+input);\n        let currentInputValue = input;        \n\n       // \"AC\" button replace by \"C\" when input true\n        const tempInputNumbers = this.state.inputNumbers\n        \n        //Check input---------------------------\n         if(currentInputValue === \"+\" || currentInputValue === \"-\"||currentInputValue === \"×\" \n        || currentInputValue === \"÷\" || currentInputValue === \"%\"||currentInputValue === \"=\"\n        || currentInputValue === \"+/-\"){           \n\n            if(this.state.currentNumericInput !== \"\"){\n                this.operatorHandler(currentInputValue)\n            }        \n        }\n        else if(currentInputValue === \"C\" || currentInputValue === \"AC\" ){\n\n            console.log(\"All values cleared...! \")            \n            tempInputNumbers[0].input = 'AC';           \n            this.setState({\n                currentNumericInput : \"\",\n                total : 0,\n                outputDisplay : \"\",\n                prevOperator : null ,\n                inputNumbers : tempInputNumbers\n            })      \n        } \n        else{\n            this.numericHandler(currentInputValue); \n            tempInputNumbers[0].input = 'C'            \n            this.setState({\n                inputNumbers : tempInputNumbers\n            })       \n                     \n        }  \n    }\n    //================================Operator Handler=================================================    \n    operatorHandler = (operator) => {\n        console.log(\"Operator function activate\")\n\n        let resultAll = this.state.currentNumericInput;\n        \n        //Addition------------------------------\n        if(this.state.prevOperator === \"+\" ){\n            console.log(\"OperatorHandler Addition\");\n\n            resultAll = parseFloat(this.state.total) + parseFloat(this.state.currentNumericInput);  \n        }        \n        //Subtraction------------------------------\n        else if(this.state.prevOperator === \"-\" ){\n            console.log(\"OperatorHandler Subtraction\");\n\n            resultAll = parseFloat(this.state.total) - parseFloat(this.state.currentNumericInput);\n        } \n        //Multiplication------------------------------\n        else if(this.state.prevOperator === \"×\" ){\n            console.log(\"OperatorHandler Multiplication\");\n\n            resultAll = (parseFloat(this.state.total) * parseFloat(this.state.currentNumericInput));\n        } \n        //Division------------------------------\n        else if(this.state.prevOperator === \"÷\" ){\n            console.log(\"OperatorHandler Division\");\n\n            resultAll = (parseFloat(this.state.total) / parseFloat(this.state.currentNumericInput)); \n        } \n         //Positive/ negative sign------------------------------\n          if(operator === \"+/-\" ){\n            console.log(\"OperatorHandler pos/neg sign\");  \n            console.log(\"click-1\")    \n\n            let positiveNegResult = (parseFloat(this.state.currentNumericInput) * -1 ).toString();\n            \n            console.log(positiveNegResult)\n            \n            this.setState({\n            prevOperator :this.equalHandler(operator) ,\n            currentNumericInput : positiveNegResult, \n            outputDisplay: positiveNegResult,\n        \n            })     \n            console.log(\"click-1\")         \n           return positiveNegResult;\n        }              \n        //Percentage------------------------------\n         if(operator === \"%\"){\n            console.log(\"OperatorHandler Percentage\"); \n                \n             resultAll = parseFloat(resultAll)/ 100 ;\n           \n             this.setState({                \n                 total : resultAll,                \n                 currentNumericInput : \"\",                \n                 prevOperator :this.equalHandler(operator) ,\n                 outputDisplay: resultAll                     \n                 })                   \n        }  \n        // Update states for add, subtract, Multiply and Divide---------------              \n        if(this.state.prevOperator){\n\n            this.setState({                \n                total : resultAll,                \n                currentNumericInput : \"\",               \n                prevOperator :this.equalHandler(operator) ,\n                outputDisplay: resultAll                    \n                })                 \n        }\n        else{\n            console.log(\"previous operator null\")\n            if(!this.state.prevOperator ){\n\n                if(this.state.currentNumericInput){\n                    this.setState({\n                        total: this.state.currentNumericInput,\n                        prevOperator : operator                       \n                    })\n                }\n                else{\n                    this.setState({                        \n                        prevOperator : operator                       \n                    })   \n                }\n                \n            }\n        }\n        //Testing------------------------------\n        this.setState ({\n            currentNumericInput : \"\"\n        })\n    }\n    //================================Numeric Handler=================================================\n    numericHandler = (num) => {\n        console.log(\"numeric function activate\")\n\n\n        let dotCheck = this.state.currentNumericInput;\n\n        console.log({dotCheck});\n\n        let checkNumeric =  this.state.currentNumericInput.toString() + num.toString(); \n\n        if(num === \".\" && dotCheck.indexOf(\".\") !== -1){\n\n            checkNumeric = this.state.currentNumericInput.toString(); \n        }\n        if(num === \".\" && this.state.currentNumericInput===\"\"){        \n            checkNumeric = \"0.\";  \n          }\n        \n        if(num === 0 && this.state.currentNumericInput === \"\"){             \n            checkNumeric = \"0\";         \n          }\n        \n        if(num === 0 && this.state.currentNumericInput === \"0\"){             \n            checkNumeric = \"0\";         \n          }\n\n        if(num > 0 && this.state.currentNumericInput === \"0\"){             \n          checkNumeric = num;         \n        }\n                 \n        this.setState ({           \n            currentNumericInput : checkNumeric\n        })\n\n        this.resultHandler(checkNumeric)    \n    }\n    //================================Result Handler=================================================\n    resultHandler = (displayNum) => {\n        console.log(\"Result function activate\")    \n        \n        this.setState ({\n            outputDisplay : displayNum        \n        })\n    }\n    //================================Equal Handler=================================================\n    equalHandler = (operator) =>{\n        console.log(\"Equal function activate\");\n\n        if(operator === \"=\" ){\n            this.setState ({\n                prevOperator : \"\"            \n            })\n            return null;\n        }\n        if(operator === \"%\"){           \n            this.setState ({\n                prevOperator : \"\"            \n            })\n            return null;        \n        }\n        if(operator === \"+/-\"){\n            this.setState ({\n                prevOperator : \"\"\n            })\n           return null;\n        }        \n        return operator;       \n    }\n    //================================Render()=====================================================\n    render(){\n        \n        return (\n                \n            <Container>\n                <Navbar/>  \n                <Row>\n                    <Output outputShow={this.state.outputDisplay || \"0\" }></Output>\n                </Row>\n                <Row>\n                    {  this.state.inputNumbers.map((btnObject,id) =>{\n                              console.log({btnObject})       \n                        return (                   \n                        <Button \n                        \n                        symbol={btnObject.input} \n                        btnClass={btnObject.btnClass} \n                        click = {()=>this.clickHandler(btnObject.input)}\n                        key ={id}                \n                        ></Button>                \n                        );\n                    })}            \n                \n                </Row>         \n            </Container>   \n        )\n    }    \n}\nexport default Math;\n\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Math from '../components/Math';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">       \n      <Math/>      \n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}